@model Garage.Models.Vehicle

@{
    ViewBag.Title = "Parkera " + @HttpUtility.HtmlDecode(ViewBag.NyttFordon);
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr style="border-color:darkblue; background-color:darkblue;"/>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.MemberId, "Ägare", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MemberId", null, "", htmlAttributes: new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.MemberId, "", new { @class = "text-danger" })
            </div>
        </div>

        @*@if (String.IsNullOrEmpty(ViewBag.TypeOfVehicle)) {*@
        <div class="form-group">
            @Html.LabelFor(model => model.VehicleType.TypeOfVehicle, "Välj fordonstyp", htmlAttributes: new { @class = "control-label col-md-2" }) @*<--- ändring *@
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.VehicleType.TypeOfVehicle, "", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VehicleType.TypeOfVehicle, "", new { @class = "text-danger" })
            </div>
        </div>
        @*}*@

        <div class="form-group">
            @Html.LabelFor(model => model.RegNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RegNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RegNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NoOfWheels, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NoOfWheels, new { htmlAttributes = new { @class = "form-control", Value = ViewBag.AntalHjul } })
                @Html.ValidationMessageFor(model => model.NoOfWheels, "" , new { @class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden-print">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Parkera @HttpUtility.HtmlDecode(ViewBag.ParkeraFordon)" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<div class="hidden-print">
    @Html.ActionLink("Tillbaka till garaget", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@if (String.IsNullOrEmpty(ViewBag.NyttFordon) || ViewBag.NyttFordon == "nytt fordon")
{
    <script type="text/javascript">
        var element_VehicleType_TypeOfVehicle = document.getElementById('VehicleType_TypeOfVehicle');

        for (i = 0; i < element_VehicleType_TypeOfVehicle.options.length; i++)
            element_VehicleType_TypeOfVehicle.options[i].selected = false;
    </script>
}
else
{
    <script type="text/javascript">
        var element_VehicleType_TypeOfVehicle = document.getElementById('VehicleType_TypeOfVehicle');
        var fordonsTyp = '@Html.Raw(ViewBag.NyttFordon.ToLower())'.split(' ')[1].toLowerCase();

        for (i = 0; i < element_VehicleType_TypeOfVehicle.options.length; i++)
            if (element_VehicleType_TypeOfVehicle.options[i].text.toLowerCase() == fordonsTyp)
                element_VehicleType_TypeOfVehicle.options[i].selected = true;
            else element_VehicleType_TypeOfVehicle.options[i].disabled = true;
        for (i = 0; i < element_VehicleType_TypeOfVehicle.options.length; i++)
            console.log(element_VehicleType_TypeOfVehicle.options[i].text);

        document.getElementById('NoOfWheels').value = '@ViewBag.AntalHjul';
    </script>
}
